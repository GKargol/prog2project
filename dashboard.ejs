<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <div class="button-container">
    <a href="/" class="btn-back">Back to Form</a>
    <button id="theme-toggle">Toggle Dark Mode</button>
    <a href="/logout">Logout</a>
  </div>

  <div class="container">
    <h1>Dashboard</h1>
  
    <!-- Tab buttons -->
    <div class="tab">
      <button class="tablinks" onclick="openTab(event, 'formdatas')">Form Data</button>
      <button class="tablinks" onclick="openTab(event, 'statsheet')">Statsheet</button>
    </div>
  
<!-- Form Data tab -->
<div id="formdatas" class="tabcontent" <% if (tab !== 'formdatas') { %> style="display: none;" <% } %>>
  <% const currentFormIndex = currentIndex + 1; %>
  <h2>Form Entry <%= currentFormIndex %>/<%= totalFormsCount %></h2>
  <ul>
    <% formData.forEach(form => { %>
      <li>
        <strong>Form ID:</strong> <%= form._id %><br>
        <% form.questions.forEach(question => { %>
          <p><strong>Question ID:</strong> <%= question.id %></p>
          <p><strong>Answer:</strong> <%= question.value %></p>
        <% }); %>
      </li>
    <% }); %>
  </ul>

  <!-- Next form input field -->
  <div>
    <!-- Input field for next form index -->
    <label for="nextForm">View Form Index:</label>
    <input type="number" id="nextForm" name="nextForm" min="1" max="<%= totalFormsCount %>" value="<%= currentFormIndex %>">
    <!-- Button to view next form -->
    <button onclick="viewNextForm()">View Form</button>
    <!-- Delete button for deleting form entry -->
    <button id="deleteEntryBtn" onclick="deleteForm()">Delete Entry</button>
    <button onclick="window.location.href='/download-pdf?currentIndex=<%= currentIndex %>&tab=<%= tab %>'">Download PDF</button>
  </div>

  <script>
    // JavaScript function to handle viewing next form
    function viewNextForm() {
      // Retrieve the value entered in the input field
      let nextFormIndex = parseInt(document.getElementById("nextForm").value);
      // Adjust the index to account for 1-based indexing
      if (nextFormIndex === 0) {
        nextFormIndex = 0; // Allow 0 index
      } else {
        nextFormIndex--; // Adjust to account for 1-based index
      }
      // Log the adjusted index to the console
      console.log("Next Form Index:", nextFormIndex);
      // Redirect to the dashboard page with the selected index as a query parameter and tab set to formdatas
      window.location.href = `/dashboard?currentIndex=${nextFormIndex}&tab=formdatas`;
    }

    // Function to handle delete form button click with confirmation popup
    async function deleteForm(formId) {
      // Extract the entry ID from the first entry in formData array
      const entryId = '<%= formData.length > 0 ? formData[0]._id : "" %>';
      if (!entryId) {
        alert('No entry to delete.');
        return;
      }
      if (confirm('Are you sure you want to delete this entry?')) {
        try {
          const response = await fetch(`/deleteFormsEntry/${entryId}`, {
            method: 'DELETE'
          });
          if (response.ok) {
            window.location.reload(); // Refresh the page after successful deletion
          } else {
            alert('Failed to delete entry.');
          }
        } catch (error) {
          console.error(error);
          alert('An error occurred while deleting the entry.');
        }
      }
    }
  </script>
</div>

<!-- Updated Statsheet tab -->
<div id="statsheet" class="tabcontent" <% if (tab !== 'statsheet') { %> style="display: none;" <% } %>>
  <% const currentEntryIndex = currentIndex + 1; %>
  <h2>Statsheet Entry <%= currentEntryIndex %>/<%= totalStatsCount %></h2>
  <table>
  <table>
    <thead>
      <tr>
        <!-- Include headers for Question ID, Answer -->
        <th>Question ID</th>
        <th>Answer</th>
      </tr>
    </thead>
    <tbody>
      <% statsData.forEach(entry => { %>
        <% entry.questions.forEach((question, questionIndex) => { %>
          <!-- Display each question value in a separate row -->
          <% if (Array.isArray(question.value)) { %>
            <% question.value.forEach((value, valueIndex) => { %>
              <tr>
                <!-- Display the question ID -->
                <% if (valueIndex === 0) { %>
                  <td rowspan="<%= question.value.length %>"><%= question.id %></td>
                <% } %>
                <!-- Display the individual value -->
                <td><%= value %></td>
              </tr>
            <% }); %>
          <% } else { %>
            <tr>
              <td><%= question.id %></td>
              <td><%= question.value %></td>
            </tr>
          <% } %>
        <% }); %>
      <% }); %>
    </tbody>
  </table>

  <div>
    <!-- Input field for next entry index -->
    <label for="nextEntry">View Index:</label>
    <input type="number" id="nextEntry" name="nextEntry" min="1" max="<%= totalStatsCount %>" value="<%= currentIndex + 1 %>">
    <!-- Button to view next entry -->
    <button onclick="viewNextEntry()">View Entry</button>
    <!-- Delete button -->
    <button id="deleteEntryBtn" onclick="deleteEntry()">Delete Entry</button>
    <button onclick="window.location.href='/download-pdf?currentIndex=<%= currentIndex %>&tab=<%= tab %>'">Download PDF</button>
  </div>

  <script>
    // JavaScript function to handle viewing next entry
    function viewNextEntry() {
      // Retrieve the value entered in the input field
      let nextEntryIndex = parseInt(document.getElementById("nextEntry").value);
      // Adjust the index to account for 1-based indexing
      if (nextEntryIndex === 0) {
        nextEntryIndex = 0; // Allow 0 index
      } else {
        nextEntryIndex--; // Adjust to account for 1-based index
      }
      // Log the adjusted index to the console
      console.log("View Entry Index:", nextEntryIndex);
      // Redirect to the dashboard page with the selected index as a query parameter and tab set to statsheet
      window.location.href = `/dashboard?currentIndex=${nextEntryIndex}&tab=statsheet`;
    }

    async function deleteEntry() {
      // Extract the entry ID from the first entry in statsData array
      const entryId = '<%= statsData.length > 0 ? statsData[0]._id : "" %>';
      if (!entryId) {
        alert('No entry to delete.');
        return;
      }
      if (confirm('Are you sure you want to delete this entry?')) {
        try {
          const response = await fetch(`/deleteStatsEntry/${entryId}`, {
            method: 'DELETE'
          });
          if (response.ok) {
            window.location.reload(); // Refresh the page after successful deletion
          } else {
            alert('Failed to delete entry.');
          }
        } catch (error) {
          console.error(error);
          alert('An error occurred while deleting the entry.');
        }
      }
    }
  </script>
</div>


  </div>

  <script>
    // JavaScript function to open the selected tab
    function openTab(evt, tabName) {
    var i, tabcontent, tablinks;
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    document.getElementById(tabName).style.display = "block";
    evt.currentTarget.className += " active";

    // Update the URL to reflect the current tab without reloading the page
    const url = new URL(window.location);
    url.searchParams.set('tab', tabName);  // Assuming 'tab' is the query parameter used to determine the active tab
    history.pushState({ tab: tabName }, '', url);  // Update the URL
}

  </script>

  <script>
    // Check if dark mode preference is stored in local storage
    const isDarkMode = localStorage.getItem("darkMode") === "true";
  
    // Set initial dark mode state based on the stored preference
    if (isDarkMode) {
      document.body.classList.add("dark-mode");
    }
  
    const themeToggle = document.getElementById("theme-toggle");
  
    themeToggle.addEventListener("click", () => {
      // Toggle dark mode class on the body element
      document.body.classList.toggle("dark-mode");
  
      // Store the dark mode preference in local storage
      const isDarkMode = document.body.classList.contains("dark-mode");
      localStorage.setItem("darkMode", isDarkMode.toString());
    });
  </script>
</body>
</html>
